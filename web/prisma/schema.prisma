datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  email                     String?         @unique
  username                  String?         @unique
  name                      String?
  image                     String?
  emailVerified             DateTime?
  isAdmin                   Boolean         @default(false)
  
  // Authentication fields
  password                  String?
  verificationCode          String?
  verificationExpiry        DateTime?
  resetToken                String?
  resetTokenExpiry          DateTime?

  paymentProcessorUserId    String?         @unique
  lemonSqueezyCustomerPortalUrl String?     // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus        String?         // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan          String?         // 'hobby', 'pro'
  datePaid                  DateTime?
  credits                   Int             @default(3)

  // NextAuth.js relations
  accounts                  Account[]
  sessions                  Session[]

  gptResponses              GptResponse[]
  contactFormMessages       ContactFormMessage[]
  tasks                     Task[]
  files                     File[]
  companies                 Company[]
  reports                   Report[]
  companyMembers            CompanyMember[]
  accessRequests            CompanyAccessRequest[]
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model GptResponse {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
}

model Task {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  description               String
  time                      String          @default("1")
  isDone                    Boolean         @default(false)
}

model File {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  name                      String
  type                      String
  key                       String
  uploadUrl                 String
}

model DailyStats {
  id                               Int             @id @default(autoincrement())
  date                             DateTime        @default(now()) @unique

  totalViews                       Int             @default(0)
  prevDayViewsChangePercent        String          @default("0")
  userCount                        Int             @default(0)
  paidUserCount                    Int             @default(0)
  userDelta                        Int             @default(0)
  paidUserDelta                    Int             @default(0)
  totalRevenue                     Float           @default(0)
  totalProfit                      Float           @default(0)

  sources                          PageViewSource[]
}

model PageViewSource {
  @@id([date, name])
  name                     String
  date                     DateTime        @default(now())

  dailyStats               DailyStats?     @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId             Int?

  visitors                 Int
}

model Logs {
  id                       Int             @id @default(autoincrement())
  createdAt                DateTime        @default(now())

  message                  String
  level                    String
}

model ContactFormMessage {
  id                        String          @id @default(uuid())
  createdAt                 DateTime        @default(now())

  user                      User            @relation(fields: [userId], references: [id])
  userId                    String

  content                   String
  isRead                    Boolean         @default(false)
  repliedAt                 DateTime?
}

// Hyperformant-specific models

// Company Management
model Company {
  id          String   @id @default(uuid())
  name        String
  domain      String?  @unique
  industry    String?
  employees   Int?
  revenue     String?
  founded     DateTime?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
  reports   Report[]
  members   CompanyMember[]
  accessRequests CompanyAccessRequest[]

  @@map("companies")
}

// Company Members - Many-to-many relationship with roles
model CompanyMember {
  id        String   @id @default(uuid())
  role      CompanyRole @default(VIEWER)
  joinedAt  DateTime @default(now())
  
  // Relations
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  @@unique([companyId, userId])
  @@map("company_members")
}

// Company Access Requests
model CompanyAccessRequest {
  id          String   @id @default(uuid())
  status      RequestStatus @default(PENDING)
  message     String?  // Optional message from requester
  requestedRole CompanyRole @default(VIEWER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   String
  requester   User     @relation(fields: [requesterId], references: [id])
  requesterId String
  
  @@unique([companyId, requesterId])
  @@map("company_access_requests")
}

// Market Forces Reports
model Report {
  id          String      @id @default(uuid())
  title       String
  type        ReportType
  status      ReportStatus @default(PENDING)
  content     String?
  filePath    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  createdBy User    @relation(fields: [userId], references: [id])
  userId    String

  @@map("reports")
}

// Market Intelligence Data
model SentimentData {
  id        String   @id @default(uuid())
  companyId String
  source    String   // reddit, twitter, g2, hackernews
  sentiment String   // positive, negative, neutral
  score     Float
  content   String
  url       String?
  createdAt DateTime @default(now())

  @@map("sentiment_data")
}

// Daily Business Metrics
model DailyMetrics {
  id                  String   @id @default(uuid())
  date                DateTime @unique
  prospectCount       Int      @default(0)
  replyRate           Float    @default(0)
  previewConversions  Int      @default(0)
  fullReportSales     Int      @default(0)
  consultingConversions Int    @default(0)
  revenue             Float    @default(0)
  createdAt           DateTime @default(now())

  @@map("daily_metrics")
}

// Apollo.io Integration Tables
model ApolloSmartList {
  id          String   @id @default(uuid())
  apolloId    String   @unique
  name        String
  description String?
  filters     Json     // Apollo.io filter configuration
  prospectCount Int    @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("apollo_smart_lists")
}

model ApolloSequence {
  id              String   @id @default(uuid())
  apolloId        String   @unique
  name            String
  description     String?
  steps           Json     // Sequence step configuration
  isActive        Boolean  @default(true)
  replyRate       Float    @default(0)
  openRate        Float    @default(0)
  clickRate       Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("apollo_sequences")
}

model ProspectApolloSync {
  id                String   @id @default(uuid())
  apolloContactId   String   @unique
  email             String
  firstName         String?
  lastName          String?
  company           String?
  title             String?
  linkedinUrl       String?
  status            String   // contacted, replied, interested, converted
  lastSyncAt        DateTime @default(now())
  createdAt         DateTime @default(now())

  @@map("prospect_apollo_sync")
}

model ApolloWebhookEvent {
  id        String   @id @default(uuid())
  eventType String   // contact.created, sequence.replied, etc.
  payload   Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("apollo_webhook_events")
}

// Enums
enum ReportType {
  PREVIEW
  FULL
  CUSTOM
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum CompanyRole {
  ADMIN
  EDITOR
  VIEWER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}