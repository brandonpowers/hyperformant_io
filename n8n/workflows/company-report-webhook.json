{
  "name": "Company Report Webhook - Email to Domain Research",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-report",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "company-report-webhook",
      "name": "Company Report Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "company-report-main"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "request-id",
              "name": "request_id",
              "value": "={{ $now }}-{{ Math.random().toString(36).substr(2, 9) }}",
              "type": "string"
            },
            {
              "id": "email-input",
              "name": "email",
              "value": "={{ $json.email || '' }}",
              "type": "string"
            },
            {
              "id": "timestamp",
              "name": "timestamp",
              "value": "={{ $now }}",
              "type": "dateTime"
            }
          ]
        },
        "options": {}
      },
      "id": "extract-form-data",
      "name": "Extract Form Data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "jsCode": "// Email validation and domain extraction\nconst email = $input.first().json.email;\n\n// Check if email exists\nif (!email || email.trim() === '') {\n  return [{\n    status: 'error',\n    message: 'Email address is required',\n    error_code: 'EMAIL_REQUIRED'\n  }];\n}\n\n// Basic email regex pattern\nconst emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n// Validate email format\nif (!emailRegex.test(email)) {\n  return [{\n    status: 'error',\n    message: 'Invalid email format',\n    error_code: 'INVALID_EMAIL_FORMAT'\n  }];\n}\n\n// Extract domain from email\nconst domain = email.split('@')[1].toLowerCase();\n\n// Check for common personal email domains\nconst personalDomains = [\n  'gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', \n  'aol.com', 'icloud.com', 'protonmail.com', 'mail.com'\n];\n\nconst isPersonalEmail = personalDomains.includes(domain);\n\nif (isPersonalEmail) {\n  return [{\n    status: 'error',\n    message: 'Personal email addresses are not supported. Please use a business email address.',\n    error_code: 'PERSONAL_EMAIL_NOT_ALLOWED'\n  }];\n}\n\n// Return validated data\nreturn [{\n  status: 'success',\n  email: email,\n  domain: domain,\n  request_id: $input.first().json.request_id,\n  timestamp: $input.first().json.timestamp\n}];"
      },
      "id": "validate-email",
      "name": "Validate Email & Extract Domain",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validation-success",
              "leftValue": "={{ $json.status }}",
              "rightValue": "success",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-validation",
      "name": "Check Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "https://api.apollo.io/v1/organizations/search",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "api_key",
              "value": "={{ $env.APOLLO_API_KEY }}"
            },
            {
              "name": "organization_domains",
              "value": "={{ $json.domain }}"
            },
            {
              "name": "per_page",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "id": "search-company-apollo",
      "name": "Search Company in Apollo",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 200],
      "credentials": {
        "httpHeaderAuth": {
          "id": "apollo-api-auth",
          "name": "Apollo API Auth"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Process Apollo.io company search response\nconst apolloResponse = $input.first().json;\nconst requestData = $('Validate Email & Extract Domain').first().json;\n\nif (!apolloResponse.organizations || apolloResponse.organizations.length === 0) {\n  return [{\n    status: 'not_found',\n    message: `No company found for domain: ${requestData.domain}`,\n    domain: requestData.domain,\n    request_id: requestData.request_id\n  }];\n}\n\nconst company = apolloResponse.organizations[0];\n\n// Process company data\nconst companyData = {\n  status: 'found',\n  apollo_id: company.id,\n  name: company.name,\n  domain: company.primary_domain || requestData.domain,\n  industry: company.industry,\n  employee_count: company.estimated_num_employees || 0,\n  annual_revenue: company.annual_revenue,\n  headquarters: company.headquarters_address,\n  apollo_url: `https://app.apollo.io/#/companies/${company.id}`,\n  linkedin_url: company.linkedin_url,\n  website_url: company.website_url,\n  phone: company.phone,\n  founded_year: company.founded_year,\n  description: company.short_description,\n  request_id: requestData.request_id,\n  timestamp: requestData.timestamp,\n  original_email: requestData.email\n};\n\nconsole.log(`Found company: ${company.name} for domain: ${requestData.domain}`);\n\nreturn [companyData];"
      },
      "id": "process-company-data",
      "name": "Process Company Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1340, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "company-found",
              "leftValue": "={{ $json.status }}",
              "rightValue": "found",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-company-found",
      "name": "Check Company Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1560, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO company_report_requests (request_id, email, domain, company_name, apollo_id, status, created_at) VALUES ('{{ $json.request_id }}', '{{ $json.original_email }}', '{{ $json.domain }}', '{{ $json.name }}', '{{ $json.apollo_id }}', 'processing', NOW()) RETURNING id",
        "options": {}
      },
      "id": "log-company-request",
      "name": "Log Company Request",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1780, 120],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase Main"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT sync_apollo_company('{{ $json.apollo_id }}', '{{ $json | jsonStringify }}') as company_id",
        "options": {}
      },
      "id": "sync-company-to-db",
      "name": "Sync Company to DB",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [2000, 120],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-main",
          "name": "Supabase Main"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.N8N_WEBHOOK_BASE_URL }}/webhook/deep-research-agent",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "orchestration_id",
              "value": "={{ $('Process Company Data').first().json.request_id }}"
            },
            {
              "name": "action",
              "value": "research_single_company"
            },
            {
              "name": "company_data",
              "value": "={{ $('Process Company Data').first().json }}"
            },
            {
              "name": "priority",
              "value": "high"
            }
          ]
        },
        "options": {}
      },
      "id": "trigger-company-research",
      "name": "Trigger Company Research",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [2220, 120],
      "credentials": {
        "httpHeaderAuth": {
          "id": "n8n-webhook-auth",
          "name": "N8N Webhook Auth"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-status",
              "name": "status",
              "value": "success",
              "type": "string"
            },
            {
              "id": "success-message",
              "name": "message",
              "value": "Company report generation initiated successfully",
              "type": "string"
            },
            {
              "id": "request-id",
              "name": "request_id",
              "value": "={{ $('Process Company Data').first().json.request_id }}",
              "type": "string"
            },
            {
              "id": "company-name",
              "name": "company_name",
              "value": "={{ $('Process Company Data').first().json.name }}",
              "type": "string"
            },
            {
              "id": "company-domain",
              "name": "company_domain",
              "value": "={{ $('Process Company Data').first().json.domain }}",
              "type": "string"
            },
            {
              "id": "apollo-url",
              "name": "apollo_url",
              "value": "={{ $('Process Company Data').first().json.apollo_url }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [2440, 120]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "not-found-status",
              "name": "status",
              "value": "not_found",
              "type": "string"
            },
            {
              "id": "not-found-message",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "string"
            },
            {
              "id": "domain",
              "name": "domain",
              "value": "={{ $json.domain }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "company-not-found-response",
      "name": "Company Not Found Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1780, 280]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-status",
              "name": "status",
              "value": "={{ $json.status }}",
              "type": "string"
            },
            {
              "id": "error-message",
              "name": "message",
              "value": "={{ $json.message }}",
              "type": "string"
            },
            {
              "id": "error-code",
              "name": "error_code",
              "value": "={{ $json.error_code }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [1120, 400]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "response",
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2660, 280]
    }
  ],
  "connections": {
    "Company Report Webhook": {
      "main": [
        [
          {
            "node": "Extract Form Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Form Data": {
      "main": [
        [
          {
            "node": "Validate Email & Extract Domain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Email & Extract Domain": {
      "main": [
        [
          {
            "node": "Check Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Validation": {
      "main": [
        [
          {
            "node": "Search Company in Apollo",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Company in Apollo": {
      "main": [
        [
          {
            "node": "Process Company Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Company Data": {
      "main": [
        [
          {
            "node": "Check Company Found",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Company Found": {
      "main": [
        [
          {
            "node": "Log Company Request",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Company Not Found Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Company Request": {
      "main": [
        [
          {
            "node": "Sync Company to DB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sync Company to DB": {
      "main": [
        [
          {
            "node": "Trigger Company Research",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Company Research": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Company Not Found Response": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Error Response": {
      "main": [
        [
          {
            "node": "Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2025-06-06T18:43:00.000Z",
      "updatedAt": "2025-06-06T18:43:00.000Z",
      "id": "company-report-webhook",
      "name": "Company Report Webhook"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-06-06T18:43:00.000Z",
  "versionId": "1"
}
